<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C-Cpp on Entropic Legos</title>
    <link>https://susmit31.github.io/entropic-legos/tags/c-cpp/</link>
    <description>Recent content in C-Cpp on Entropic Legos</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>hugo@example.com (Entropic Legos)</managingEditor>
    <webMaster>hugo@example.com (Entropic Legos)</webMaster>
    <lastBuildDate>Wed, 26 Jun 2024 23:15:37 +0600</lastBuildDate>
    <atom:link href="https://susmit31.github.io/entropic-legos/tags/c-cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring the Zig Programming Language: Part 2</title>
      <link>https://susmit31.github.io/entropic-legos/posts/speed-test/</link>
      <pubDate>Wed, 26 Jun 2024 23:15:37 +0600</pubDate><author>hugo@example.com (Entropic Legos)</author>
      <guid>https://susmit31.github.io/entropic-legos/posts/speed-test/</guid>
      <description>&lt;h1 id=&#34;zig-is-said-to-be-blazingly-fast-but-what-exactly-is-blazingly-fast&#34;&gt;Zig is said to be &amp;ldquo;blazingly fast&amp;rdquo;. But what exactly is &amp;ldquo;blazingly fast&amp;rdquo;?&lt;/h1&gt;&#xA;&lt;p&gt;Zig is certainly one of the more fun languages I&amp;rsquo;ve coded in. But how fast is it? Let&amp;rsquo;s compare it with some other top contenders, such as C, Rust, and Go. For scale, we will also put to test one of the more popular interpreted languages, Python.&lt;/p&gt;&#xA;&lt;h2 id=&#34;but-how-do-we-measure-their-speed&#34;&gt;But How Do We Measure Their Speed?&lt;/h2&gt;&#xA;&lt;p&gt;As computers are stupendously fast these days, they perform most tasks in the blink of an eye. It&amp;rsquo;s hard to write a piece of code that will be both small (i.e. can be written within a few minutes) and computationally intensive (i.e. require a noticeable amount of execution time). A hack we can use, though, is using a stupid algorithm for a simple task. For example, for our purposes, I&amp;rsquo;ve chosen the recursive computation of the Fibonacci sequence, which has an exponential time complexity (compare this to the dynamic programming approach, which has a linear time complexity). This means, for example, the execution time for calculating the &lt;em&gt;N&lt;/em&gt;-th Fibonacci number with this algorithm will be, say, &lt;em&gt;x&lt;/em&gt; times that of the &lt;em&gt;(N-1)&lt;/em&gt;-th Fibonacci number, and &lt;em&gt;x^2&lt;/em&gt; times that of &lt;em&gt;(N-2)&lt;/em&gt;-th Fibonacci number, and so on. So as we scale the problem upwards, the execution time increases geometrically.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
